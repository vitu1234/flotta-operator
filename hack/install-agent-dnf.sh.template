#!/bin/bash

set -e

usage()
{
cat << EOF
Usage: $0 OPTIONS
This script installs Flotta agent component on RPM-compatible machine.
OPTIONS:
   -h      Show this message
   -i      IP address under which your Flotta edge API endpoint is accessible to the device.
           For testing, when your KUBECONFIG is pointing to cluster with Flotta operator deployed, you can run

           kubectl port-forward service/flotta-edge-api -n flotta 8043 --address 0.0.0.0

           to make the Flotta API accessible from your machine
   -p      Port to connect to Flotta API, default 8043
   -t      Indicates if to use testing repository, default is false
EOF
}

FLOTTA_PORT=8043

while getopts "i:p:t:h" option; do
    case "${option}"
    in
        i) FLOTTA_API_IP=${OPTARG};;
        p) FLOTTA_PORT=${OPTARG};;
        t) TESTING_REPO=0;;
        h)
            usage
            exit 0
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done

if [[ -z $FLOTTA_API_IP ]]; then
    echo "ERROR: Flotta API IP is required"
    usage
    exit 1
fi


TESTING_SUFFIX=""
if [[ -n $TESTING_REPO ]]; then
    TESTING_SUFFIX="-testing"
fi

# TODO: When podman-4.2 rpms are available in updates, use them instead of updates-testing repo
dnf -y --best install podman --enablerepo=updates-testing

VERSION=$(grep ^VERSION_ID /etc/os-release | cut -d= -f2)
curl -s https://copr.fedorainfracloud.org/coprs/project-flotta/flotta${TESTING_SUFFIX}/repo/fedora-${VERSION}/project-flotta-flotta-fedora-${VERSION}.repo -o /etc/yum.repos.d/project-flotta.repo
dnf clean all
dnf --best -y install node_exporter yggdrasil flotta-agent

cat <<EOF >> /etc/hosts
$FLOTTA_API_IP project-flotta.io
EOF

mkdir -p /etc/pki/consumer
cat <<EOF > /etc/pki/consumer/ca.pem
<CA_PEM>
EOF

cat <<EOF > /etc/pki/consumer/key.pem
<KEY_PEM>
EOF

cat <<EOF > /etc/pki/consumer/cert.pem
<CERT_PEM>
EOF

function get_client_id() {
  cat /etc/machine-id
}

cat <<EOF > /etc/yggdrasil/config.toml
<CONFIG_TOML>
EOF

systemctl disable firewalld.service
systemctl enable nftables.service
systemctl enable yggdrasild.service
systemctl reboot