// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PlaybookExecutionStatus playbook execution status
//
// swagger:model playbook-execution-status
type PlaybookExecutionStatus struct {

	// last data upload
	// Format: date-time
	LastDataUpload strfmt.DateTime `json:"last_data_upload,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// status
	// Enum: [Deploying TargetVerification Running SuccessfullyCompleted CompletedWithError]
	Status string `json:"status,omitempty"`
}

// Validate validates this playbook execution status
func (m *PlaybookExecutionStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastDataUpload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlaybookExecutionStatus) validateLastDataUpload(formats strfmt.Registry) error {
	if swag.IsZero(m.LastDataUpload) { // not required
		return nil
	}

	if err := validate.FormatOf("last_data_upload", "body", "date-time", m.LastDataUpload.String(), formats); err != nil {
		return err
	}

	return nil
}

var playbookExecutionStatusTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Deploying","TargetVerification","Running","SuccessfullyCompleted","CompletedWithError"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		playbookExecutionStatusTypeStatusPropEnum = append(playbookExecutionStatusTypeStatusPropEnum, v)
	}
}

const (

	// PlaybookExecutionStatusStatusDeploying captures enum value "Deploying"
	PlaybookExecutionStatusStatusDeploying string = "Deploying"

	// PlaybookExecutionStatusStatusTargetVerification captures enum value "TargetVerification"
	PlaybookExecutionStatusStatusTargetVerification string = "TargetVerification"

	// PlaybookExecutionStatusStatusRunning captures enum value "Running"
	PlaybookExecutionStatusStatusRunning string = "Running"

	// PlaybookExecutionStatusStatusSuccessfullyCompleted captures enum value "SuccessfullyCompleted"
	PlaybookExecutionStatusStatusSuccessfullyCompleted string = "SuccessfullyCompleted"

	// PlaybookExecutionStatusStatusCompletedWithError captures enum value "CompletedWithError"
	PlaybookExecutionStatusStatusCompletedWithError string = "CompletedWithError"
)

// prop value enum
func (m *PlaybookExecutionStatus) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, playbookExecutionStatusTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PlaybookExecutionStatus) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this playbook execution status based on context it is used
func (m *PlaybookExecutionStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PlaybookExecutionStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlaybookExecutionStatus) UnmarshalBinary(b []byte) error {
	var res PlaybookExecutionStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
