/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/project-flotta/flotta-operator/api/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PlaybookExecutionLister helps list PlaybookExecutions.
// All objects returned here must be treated as read-only.
type PlaybookExecutionLister interface {
	// List lists all PlaybookExecutions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PlaybookExecution, err error)
	// PlaybookExecutions returns an object that can list and get PlaybookExecutions.
	PlaybookExecutions(namespace string) PlaybookExecutionNamespaceLister
	PlaybookExecutionListerExpansion
}

// playbookExecutionLister implements the PlaybookExecutionLister interface.
type playbookExecutionLister struct {
	indexer cache.Indexer
}

// NewPlaybookExecutionLister returns a new PlaybookExecutionLister.
func NewPlaybookExecutionLister(indexer cache.Indexer) PlaybookExecutionLister {
	return &playbookExecutionLister{indexer: indexer}
}

// List lists all PlaybookExecutions in the indexer.
func (s *playbookExecutionLister) List(selector labels.Selector) (ret []*v1alpha1.PlaybookExecution, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PlaybookExecution))
	})
	return ret, err
}

// PlaybookExecutions returns an object that can list and get PlaybookExecutions.
func (s *playbookExecutionLister) PlaybookExecutions(namespace string) PlaybookExecutionNamespaceLister {
	return playbookExecutionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PlaybookExecutionNamespaceLister helps list and get PlaybookExecutions.
// All objects returned here must be treated as read-only.
type PlaybookExecutionNamespaceLister interface {
	// List lists all PlaybookExecutions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PlaybookExecution, err error)
	// Get retrieves the PlaybookExecution from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PlaybookExecution, error)
	PlaybookExecutionNamespaceListerExpansion
}

// playbookExecutionNamespaceLister implements the PlaybookExecutionNamespaceLister
// interface.
type playbookExecutionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PlaybookExecutions in the indexer for a given namespace.
func (s playbookExecutionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PlaybookExecution, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PlaybookExecution))
	})
	return ret, err
}

// Get retrieves the PlaybookExecution from the indexer for a given namespace and name.
func (s playbookExecutionNamespaceLister) Get(name string) (*v1alpha1.PlaybookExecution, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("playbookexecution"), name)
	}
	return obj.(*v1alpha1.PlaybookExecution), nil
}
