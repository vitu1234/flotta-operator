/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/project-flotta/flotta-operator/api/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EdgeDeviceSetLister helps list EdgeDeviceSets.
// All objects returned here must be treated as read-only.
type EdgeDeviceSetLister interface {
	// List lists all EdgeDeviceSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EdgeDeviceSet, err error)
	// EdgeDeviceSets returns an object that can list and get EdgeDeviceSets.
	EdgeDeviceSets(namespace string) EdgeDeviceSetNamespaceLister
	EdgeDeviceSetListerExpansion
}

// edgeDeviceSetLister implements the EdgeDeviceSetLister interface.
type edgeDeviceSetLister struct {
	indexer cache.Indexer
}

// NewEdgeDeviceSetLister returns a new EdgeDeviceSetLister.
func NewEdgeDeviceSetLister(indexer cache.Indexer) EdgeDeviceSetLister {
	return &edgeDeviceSetLister{indexer: indexer}
}

// List lists all EdgeDeviceSets in the indexer.
func (s *edgeDeviceSetLister) List(selector labels.Selector) (ret []*v1alpha1.EdgeDeviceSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EdgeDeviceSet))
	})
	return ret, err
}

// EdgeDeviceSets returns an object that can list and get EdgeDeviceSets.
func (s *edgeDeviceSetLister) EdgeDeviceSets(namespace string) EdgeDeviceSetNamespaceLister {
	return edgeDeviceSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EdgeDeviceSetNamespaceLister helps list and get EdgeDeviceSets.
// All objects returned here must be treated as read-only.
type EdgeDeviceSetNamespaceLister interface {
	// List lists all EdgeDeviceSets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EdgeDeviceSet, err error)
	// Get retrieves the EdgeDeviceSet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EdgeDeviceSet, error)
	EdgeDeviceSetNamespaceListerExpansion
}

// edgeDeviceSetNamespaceLister implements the EdgeDeviceSetNamespaceLister
// interface.
type edgeDeviceSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EdgeDeviceSets in the indexer for a given namespace.
func (s edgeDeviceSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EdgeDeviceSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EdgeDeviceSet))
	})
	return ret, err
}

// Get retrieves the EdgeDeviceSet from the indexer for a given namespace and name.
func (s edgeDeviceSetNamespaceLister) Get(name string) (*v1alpha1.EdgeDeviceSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("edgedeviceset"), name)
	}
	return obj.(*v1alpha1.EdgeDeviceSet), nil
}
