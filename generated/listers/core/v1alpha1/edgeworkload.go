/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/project-flotta/flotta-operator/api/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EdgeWorkloadLister helps list EdgeWorkloads.
// All objects returned here must be treated as read-only.
type EdgeWorkloadLister interface {
	// List lists all EdgeWorkloads in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EdgeWorkload, err error)
	// EdgeWorkloads returns an object that can list and get EdgeWorkloads.
	EdgeWorkloads(namespace string) EdgeWorkloadNamespaceLister
	EdgeWorkloadListerExpansion
}

// edgeWorkloadLister implements the EdgeWorkloadLister interface.
type edgeWorkloadLister struct {
	indexer cache.Indexer
}

// NewEdgeWorkloadLister returns a new EdgeWorkloadLister.
func NewEdgeWorkloadLister(indexer cache.Indexer) EdgeWorkloadLister {
	return &edgeWorkloadLister{indexer: indexer}
}

// List lists all EdgeWorkloads in the indexer.
func (s *edgeWorkloadLister) List(selector labels.Selector) (ret []*v1alpha1.EdgeWorkload, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EdgeWorkload))
	})
	return ret, err
}

// EdgeWorkloads returns an object that can list and get EdgeWorkloads.
func (s *edgeWorkloadLister) EdgeWorkloads(namespace string) EdgeWorkloadNamespaceLister {
	return edgeWorkloadNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EdgeWorkloadNamespaceLister helps list and get EdgeWorkloads.
// All objects returned here must be treated as read-only.
type EdgeWorkloadNamespaceLister interface {
	// List lists all EdgeWorkloads in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EdgeWorkload, err error)
	// Get retrieves the EdgeWorkload from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EdgeWorkload, error)
	EdgeWorkloadNamespaceListerExpansion
}

// edgeWorkloadNamespaceLister implements the EdgeWorkloadNamespaceLister
// interface.
type edgeWorkloadNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EdgeWorkloads in the indexer for a given namespace.
func (s edgeWorkloadNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EdgeWorkload, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EdgeWorkload))
	})
	return ret, err
}

// Get retrieves the EdgeWorkload from the indexer for a given namespace and name.
func (s edgeWorkloadNamespaceLister) Get(name string) (*v1alpha1.EdgeWorkload, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("edgeworkload"), name)
	}
	return obj.(*v1alpha1.EdgeWorkload), nil
}
